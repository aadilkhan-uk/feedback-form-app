// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum QuestionType {
  text
  rating
}

model Restaurant {
  id         String   @id @default(cuid())
  name       String
  placeId    String?  @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  surveys    Survey[]
}

model Survey {
  id           String      @id @default(cuid())          // survey ID
  title        String
  slug         String      @unique                       // for /s/[slug]
  isActive     Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // FK
  restaurantId String?
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: SetNull)

  // Relations
  questions    Question[]
  submissions  Submission[]

  @@index([restaurantId])
}

model Question {
  id         String       @id @default(cuid())           // question ID
  type       QuestionType
  required   Boolean      @default(false)
  label      String
  sortOrder  Int          @default(0)

  // FK
  surveyId   String
  survey     Survey       @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  // Relations
  answers    Answer[]

  @@index([surveyId, sortOrder])
}

model Submission {
  id         String    @id @default(cuid())
  surveyId   String
  createdAt  DateTime  @default(now())

  survey     Survey    @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  answers    Answer[]

  @@index([surveyId, createdAt])
}

model Answer {
  id            String    @id @default(cuid())

  // “Response schema” — tie an answer to a question (and its submission/survey)
  submissionId  String
  questionId    String

  // Values (choose one based on the question type)
  textValue     String?
  ratingValue   Int?      // enforce 1..10 in app or with a DB CHECK if supported
  raw           Json?     // optional: store original payload

  submission    Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  question      Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
  @@index([submissionId])
}
